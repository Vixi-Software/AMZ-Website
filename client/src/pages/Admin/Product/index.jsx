import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import CTable from '../../../components/ui/table'
import { useProductService } from '../../../services/productService'
import routepath from '../../../constants/routePath'
import { message, Modal, Form, Input, InputNumber, Select, Row, Col, Button, Switch } from 'antd'
import { useFirestore } from '../../../hooks/useFirestore'
import { db } from '../../../utils/firebase'
import TextArea from 'antd/es/input/TextArea'
const columns = [
  {
    title: 'T√™n s·∫£n ph·∫©m',
    dataIndex: 'name',
    enableSort: true,
    enableFilter: true,
    filterType: 'text',
    render: (text, record) =>
      record.isbestSeller ? (
        <span style={{ color: '#faad14', fontWeight: 'bold' }}>{text} <span style={{ fontSize: 12 }}>üî•</span></span>
      ) : (
        <span>{text}</span>
      ),
  },
  {
    title: 'Gi√°',
    dataIndex: 'pricesBanLe',
    enableSort: true,
    enableFilter: true,
    filterType: 'numberRange',
    render: (value) =>
      value !== undefined
        ? value.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
        : '',
  },
  {
    title: 'Danh m·ª•c',
    dataIndex: 'category',
    enableFilter: true,
    filterType: 'select',
  },
  {
    title: 'T√¨nh tr·∫°ng',
    dataIndex: 'statusSell',
    enableSort: true,
    enableFilter: true,
    filterType: 'select',
  },
  {
    title: 'M√†u s·∫Øc',
    dataIndex: 'colors',
    enableSort: true,
    enableFilter: true,
    filterType: 'select',
  },
]

const statusOptions = [
  { label: 'Hi·ªÉn th·ªã tr√™n website', value: 'active' },
  { label: '·∫®n tr√™n website', value: 'inactive' }
]

const productTypeOptions = [
  { label: 'Loa di ƒë·ªông c≈©', value: 'Loa di ƒë·ªông c≈©' },
  { label: 'Loa karaoke c≈©', value: 'Loa karaoke c≈©' },
  { label: 'Loa ƒë·ªÉ b√†n c≈©', value: 'Loa ƒë·ªÉ b√†n c≈©' },
  { label: 'Tai nghe ch·ª•p tai c≈©', value: 'Tai nghe ch·ª•p tai c≈©' },
  { label: 'Tai nghe nh√©t tai c≈©', value: 'Tai nghe nh√©t tai c≈©' },
]

const brandOptions = [
  { label: 'Acnos', value: 'Acnos' },
  { label: 'Alpha Works', value: 'Alpha Works' },
  { label: 'Anker', value: 'Anker' },
  { label: 'Bang&Olufsen', value: 'Bang&Olufsen' },
  { label: 'Baseus', value: 'Baseus' },
  { label: 'Beats', value: 'Beats' },
  { label: 'Bose', value: 'Bose' },
  { label: 'Harman Kardon', value: 'Harman Kardon' },
  { label: 'JBL', value: 'JBL' },
  { label: 'Klipsch', value: 'Klipsch' },
  { label: 'Marshall', value: 'Marshall' },
  { label: 'Others', value: 'Others' },
  { label: 'Sennheiser', value: 'Sennheiser' },
  { label: 'Skullcandy', value: 'Skullcandy' },
  { label: 'Sony', value: 'Sony' },
  { label: 'Ultimate Ears', value: 'Ultimate Ears' },
]

const statusSellOptions = [
  { label: '99-98% Nobox', value: '99-98% Nobox' },
  { label: '99-98% Fullbox', value: '99-98% Fullbox' },
  { label: 'New Seal', value: 'New Seal' },
]

// Th√™m m·∫£ng m√†u s·∫Øc ph·ªï bi·∫øn
const colorOptions = [
  { label: 'ƒêen', value: 'ƒêen', color: '#000000' },
  { label: 'Tr·∫Øng', value: 'Tr·∫Øng', color: '#FFFFFF' },
  { label: 'ƒê·ªè', value: 'ƒê·ªè', color: '#FF0000' },
  { label: 'ƒê·ªè ƒë√¥', value: 'ƒê·ªè ƒë√¥', color: '#8B0000' },
  { label: 'Xanh d∆∞∆°ng', value: 'Xanh d∆∞∆°ng', color: '#0074D9' },
  { label: 'Xanh navy', value: 'Xanh navy', color: '#001F3F' },
  { label: 'Xanh l√°', value: 'Xanh l√°', color: '#2ECC40' },
  { label: 'Xanh r√™u', value: 'Xanh r√™u', color: '#556B2F' },
  { label: 'V√†ng', value: 'V√†ng', color: '#FFDC00' },
  { label: 'V√†ng gold', value: 'V√†ng gold', color: '#FFD700' },
  { label: 'Cam', value: 'Cam', color: '#FF851B' },
  { label: 'T√≠m', value: 'T√≠m', color: '#B10DC9' },
  { label: 'T√≠m pastel', value: 'T√≠m pastel', color: '#D1B3FF' },
  { label: 'H·ªìng', value: 'H·ªìng', color: '#FF69B4' },
  { label: 'H·ªìng pastel', value: 'H·ªìng pastel', color: '#FFD1DC' },
  { label: 'X√°m', value: 'X√°m', color: '#AAAAAA' },
  { label: 'X√°m ƒë·∫≠m', value: 'X√°m ƒë·∫≠m', color: '#555555' },
  { label: 'B·∫°c', value: 'B·∫°c', color: '#C0C0C0' },
  { label: 'N√¢u', value: 'N√¢u', color: '#8B4513' },
  { label: 'Be', value: 'Be', color: '#F5F5DC' },
  { label: 'Xanh ng·ªçc', value: 'Xanh ng·ªçc', color: '#40E0D0' },
  { label: 'Xanh mint', value: 'Xanh mint', color: '#AAF0D1' },
  { label: 'Xanh lam', value: 'Xanh lam', color: '#4682B4' },
  { label: 'Xanh pastel', value: 'Xanh pastel', color: '#B2F9FC' },
  { label: 'Kh√°c', value: 'Kh√°c', color: '#888888' },
]

function ProductManagement() {
  const { getAllProducts } = useProductService();
  const [data, setData] = React.useState([]);
  const navigate = useNavigate();
  const [selectedRowKeys, setSelectedRowKeys] = React.useState([]);
  const [editModalOpen, setEditModalOpen] = React.useState(false)
  const [editProduct, setEditProduct] = React.useState(null)
  const [form] = Form.useForm(); // Th√™m d√≤ng n√†y
  const [formFields, setFormFields] = useState([]); // Th√™m state n√†y
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [viewProduct, setViewProduct] = useState(null);

  useEffect(() => {
    const fetchProducts = async () => {
      const result = await getAllProducts();
      setData(result || []);
    };
    fetchProducts();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // H√†m parse tableInfo HTML th√†nh m·∫£ng [{ key, value }]
  function parseTableInfo(html) {
    if (!html) return [{ key: '', value: '' }]
    const rowRegex = /<tr.*?>(.*?)<\/tr>/g
    const cellRegex = /<td.*?>(.*?)<\/td>/g
    const rows = []
    let rowMatch
    while ((rowMatch = rowRegex.exec(html))) {
      const cells = []
      let cellMatch
      while ((cellMatch = cellRegex.exec(rowMatch[1]))) {
        // Lo·∫°i b·ªè tag HTML n·∫øu c√≥
        const text = cellMatch[1].replace(/<.*?>/g, '').trim()
        cells.push(text)
      }
      if (cells.length === 2) {
        rows.push({ key: cells[0], value: cells[1] })
      }
    }
    return rows.length ? rows : [{ key: '', value: '' }]
  }

  // Khi m·ªü modal s·ª≠a, chuy·ªÉn d·ªØ li·ªáu sang fields
  useEffect(() => {
    if (editModalOpen && editProduct) {
      const fields = [
        { name: ['name'], value: editProduct.name || '' },
        { name: ['status'], value: editProduct.status || '' },
        { name: ['colors'], value: editProduct.colors || [] },
        { name: ['statusSell'], value: editProduct.statusSell || [] },
        { name: ['pricesBanBuon'], value: editProduct.pricesBanBuon || 0 },
        { name: ['pricesBanLe'], value: editProduct.pricesBanLe || 0 },
        { name: ['inventories'], value: editProduct.inventories || 0 },
        { name: ['brand'], value: editProduct.brand || '' },
        { name: ['category'], value: editProduct.category || '' },
        { name: ['tags'], value: Array.isArray(editProduct.tags) ? editProduct.tags.join(',') : (editProduct.tags || '') },
        { name: ['description'], value: editProduct.description || '' },
        { name: ['images'], value: editProduct.images || [] },
        { name: ['isbestSeller'], value: !!editProduct.isbestSeller }, // Th√™m d√≤ng n√†y
        // ...th√™m c√°c field kh√°c n·∫øu c·∫ßn...
      ];
      setFormFields(fields);

      // Parse tableInfo ƒë·ªÉ set l·∫°i tableRows
      setTableRows(parseTableInfo(editProduct.tableInfo));
    }
  }, [editModalOpen, editProduct]);

  const [tableRows, setTableRows] = useState([{ key: '', value: '' }])
  const { updateDocData, deleteDocData } = useFirestore(db, 'productStore')

  const handleAddRow = () => {
    setTableRows([...tableRows, { key: '', value: '' }])
  }

  const handleRowChange = (index, field, val) => {
    const newRows = [...tableRows]
    newRows[index][field] = val
    setTableRows(newRows)
  }

  const renderTableRows = () => (
    tableRows.map((row, idx) => (
      <Row gutter={8} key={idx} style={{ marginBottom: 8 }}>
        <Col span={11}>
          <Input
            placeholder="T√™n thu·ªôc t√≠nh"
            value={row.key}
            onChange={e => handleRowChange(idx, 'key', e.target.value)}
          />
        </Col>
        <Col span={11}>
          <Input
            placeholder="Gi√° tr·ªã"
            value={row.value}
            onChange={e => handleRowChange(idx, 'value', e.target.value)}
          />
        </Col>
      </Row>
    ))
  )

  const convertRowsToHtmlTable = () => {
    if (!tableRows.length) return ''
    let html = `<table style="width:100%; border-collapse:collapse; border:1px solid #ccc;">`
    tableRows.forEach((row, idx) => {
      if (row.key || row.value) {
        html += `<tr${idx % 2 === 1 ? ' style="background:#f9f9f9;"' : ''}>`
        html += `<td style="font-weight:bold; border:1px solid #ccc; padding:4px 8px;">${row.key}</td>`
        html += `<td style="border:1px solid #ccc; padding:4px 8px;">${row.value}</td>`
        html += '</tr>'
      }
    })
    html += '</table>'
    return html
  }

  const handleFinish = async (values) => {
    const result = {
      ...values,
      product_type: values.category,
      tags: typeof values.tags === 'string' ? values.tags : (Array.isArray(values.tags) ? values.tags.join(',') : ''),
      images: values.images || [],
      colors: values.colors || [],
      statusSell: values.statusSell || [],
      pricesBanBuon: values.pricesBanBuon || 0,
      pricesBanLe: values.pricesBanLe || 0,
      inventories: values.inventories || 0,
      sku: values.sku || '',
      tableInfo: convertRowsToHtmlTable(),
      isbestSeller: !!values.isbestSeller, // Th√™m d√≤ng n√†y
    }
    try {
      await updateDocData(editProduct.id, result)
      message.success('S·ª≠a s·∫£n ph·∫©m th√†nh c√¥ng!')
      setEditModalOpen(false)
      form.resetFields()
      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m
      const updatedList = await getAllProducts();
      setData(updatedList || []);
      setSelectedRowKeys([]);
      setEditProduct(null);
      // eslint-disable-next-line no-unused-vars
    } catch (err) {
      message.error('S·ª≠a s·∫£n ph·∫©m th·∫•t b·∫°i!')
    }
  }

  return (
    <div>
      <CTable
        columns={columns}
        dataSource={data}
        onRowSelectionChange={(selectedRowKeys) => {
          setSelectedRowKeys(selectedRowKeys)
          console.log('Selected row keys:', selectedRowKeys)
        }}
        actions={[
          {
            key: 'add',
            label: 'Th√™m s·∫£n ph·∫©m',
            type: 'primary',
            className: '!bg-green-500 !text-white',
            onClick: () => navigate(routepath.adminProductAdd),
          },
          {
            key: 'edit',
            label: 'S·ª≠a',
            type: 'primary',
            className: '!bg-blue-500 !text-white',
            disabled: selectedRowKeys.length !== 1, // Ch·ªâ cho s·ª≠a khi ch·ªçn 1 s·∫£n ph·∫©m
            onClick: () => {
              if (selectedRowKeys.length === 1) {
                setEditProduct(selectedRowKeys[0])
                setEditModalOpen(true)
              }
            },
          },
          {
            key: 'delete',
            label: 'X√≥a',
            type: 'primary',
            danger: true,
            className: '!bg-red-500 !text-white',
            disabled: selectedRowKeys.length === 0,
            onClick: () => {
              Modal.confirm({
                title: 'X√°c nh·∫≠n x√≥a',
                content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ${selectedRowKeys.length} s·∫£n ph·∫©m n√†y kh√¥ng?`,
                okText: 'X√≥a',
                okType: 'danger',
                cancelText: 'H·ªßy',
                async onOk() {
                  try {
                    for (const product of selectedRowKeys) {
                      await deleteDocData(product.id || product); // product c√≥ th·ªÉ l√† object ho·∫∑c id
                    }
                    message.success('X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!');
                    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m
                    const updatedList = await getAllProducts();
                    setData(updatedList || []);
                    setSelectedRowKeys([]);
                  // eslint-disable-next-line no-unused-vars
                  } catch (err) {
                    message.error('X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!');
                  }
                }
              });
            },
          },
          {
            key: 'view',
            label: 'Xem chi ti·∫øt',
            type: 'default',
            className: '!bg-gray-200 !text-black',
            disabled: selectedRowKeys.length !== 1,
            onClick: () => {
              if (selectedRowKeys.length === 1) {
                setViewProduct(selectedRowKeys[0]);
                setViewModalOpen(true);
              }
            },
          },
          {
            key: 'best-seller',
            label: 'ƒê√°nh d·∫•u b√°n ch·∫°y',
            type: 'dashed',
            className: '!text-yellow-500 !border-yellow-500',
            disabled: selectedRowKeys.length === 0, // Cho ph√©p ch·ªçn nhi·ªÅu
            onClick: async () => {
              if (selectedRowKeys.length > 0) {
                try {
                  for (const product of selectedRowKeys) {
                    // N·∫øu ƒë√£ l√† bestSeller th√¨ b·ªè qua
                    if (product.isbestSeller === true) continue;
                    await updateDocData(product.id || product, { isbestSeller: true });
                  }
                  message.success('ƒê√£ ƒë√°nh d·∫•u s·∫£n ph·∫©m b√°n ch·∫°y!');
                  // C·∫≠p nh·∫≠t l·∫°i danh s√°ch s·∫£n ph·∫©m
                  const updatedList = await getAllProducts();
                  setData(updatedList || []);
                // eslint-disable-next-line no-unused-vars
                } catch (err) {
                  message.error('ƒê√°nh d·∫•u b√°n ch·∫°y th·∫•t b·∫°i!');
                }
              }
            },
          },
          {
            key: 'sync',
            label: 'ƒê·ªìng b·ªô',
            type: 'default',
            className: '!bg-purple-500 !text-white', // Th√™m class
            onClick: () => alert('ƒê·ªìng b·ªô s·∫£n ph·∫©m'),
          },
        ]}
      />

      <Modal
        open={editModalOpen}
        title="Ch·ªânh s·ª≠a s·∫£n ph·∫©m"
        footer={null}
        onCancel={() => {
          setEditModalOpen(false);
          form.resetFields();
          setFormFields([]); // reset fields
        }}
        destroyOnClose
        width={900}
      >
        <Form
          form={form}
          layout="vertical"
          style={{ maxWidth: 800 }}
          onFinish={handleFinish}
          fields={formFields} // Th√™m d√≤ng n√†y
          onFieldsChange={(_, allFields) => setFormFields(allFields)} // Th√™m d√≤ng n√†y
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="T√™n s·∫£n ph·∫©m" name="name" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m' }]}>
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label="Tr·∫°ng th√°i" name="status" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn tr·∫°ng th√°i' }]}>
                <Select options={statusOptions} />
              </Form.Item>
            </Col>
          </Row>

          {/* Th√™m tr∆∞·ªùng ch·ªânh s·ª≠a isbestSeller */}
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="B√°n ch·∫°y" name="isbestSeller" valuePropName="checked">
                <Switch checkedChildren="C√≥" unCheckedChildren="Kh√¥ng" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="M√†u s·∫Øc" name="colors" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√†u s·∫Øc' }]}>
                <Select
                  mode="multiple"
                  placeholder="Ch·ªçn m√†u s·∫Øc"
                  optionLabelProp="label"
                  options={colorOptions.map(opt => ({
                    ...opt,
                    label: (
                      <span>
                        <span style={{
                          display: 'inline-block',
                          width: 16,
                          height: 16,
                          borderRadius: '50%',
                          background: opt.color,
                          border: '1px solid #ccc',
                          marginRight: 8,
                          verticalAlign: 'middle'
                        }} />
                        {opt.label}
                      </span>
                    )
                  }))}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label="T√¨nh tr·∫°ng b√°n" name="statusSell" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√¨nh tr·∫°ng b√°n' }]}>
                <Select
                  mode="multiple"
                  placeholder="Ch·ªçn t√¨nh tr·∫°ng b√°n"
                  options={statusSellOptions}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label="Gi√° b√°n bu√¥n"
                name="pricesBanBuon"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p gi√° b√°n bu√¥n' },
                  { type: 'number', min: 0, message: 'Ch·ªâ nh·∫≠p s·ªë l·ªõn h∆°n ho·∫∑c b·∫±ng 0' }
                ]}
              >
                <InputNumber
                  min={0}
                  style={{ width: '100%' }}
                  formatter={value => `${value}`.replace(/[^0-9]/g, '')}
                  parser={value => value.replace(/[^0-9]/g, '')}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label="Gi√° b√°n l·∫ª"
                name="pricesBanLe"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p gi√° b√°n l·∫ª' },
                  { type: 'number', min: 0, message: 'Ch·ªâ nh·∫≠p s·ªë l·ªõn h∆°n ho·∫∑c b·∫±ng 0' }
                ]}
              >
                <InputNumber
                  min={0}
                  style={{ width: '100%' }}
                  formatter={value => `${value}`.replace(/[^0-9]/g, '')}
                  parser={value => value.replace(/[^0-9]/g, '')}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="T·ªìn kho" name="inventories" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t·ªìn kho' }]}>
                <InputNumber min={0} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label="Th∆∞∆°ng hi·ªáu" name="brand" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn th∆∞∆°ng hi·ªáu' }]}>
                <Select options={brandOptions} showSearch placeholder="Ch·ªçn th∆∞∆°ng hi·ªáu" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="Danh m·ª•c" name="category" rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i s·∫£n ph·∫©m' }]}>
                <Select options={productTypeOptions} />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label="Tags" name="tags">
                <Input placeholder="Nh·∫≠p tags, c√°ch nhau b·ªüi d·∫•u ph·∫©y" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label="M√¥ t·∫£" name="description">
                <TextArea rows={3} />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item label="H√¨nh ·∫£nh" name="images">
            <Select
              mode="tags"
              style={{ width: '100%' }}
              placeholder="Nh·∫≠p link h√¨nh ·∫£nh, Enter ƒë·ªÉ th√™m"
              tokenSeparators={[',', ' ']}
            />
          </Form.Item>

          {/* Th√¥ng s·ªë k·ªπ thu·∫≠t d·∫°ng b·∫£ng 2 c·ªôt */}
          <Form.Item label="Th√¥ng tin th√™m">
            {renderTableRows()}
            <Button type="dashed" onClick={handleAddRow} style={{ marginTop: 8 }}>
              Th√™m h√†ng
            </Button>
          </Form.Item>

          <Form.Item>
            <Button type="primary" htmlType="submit">
              L∆∞u s·∫£n ph·∫©m
            </Button>
          </Form.Item>
        </Form>
      </Modal>

      <Modal
        open={viewModalOpen}
        title="Chi ti·∫øt s·∫£n ph·∫©m"
        footer={null}
        onCancel={() => setViewModalOpen(false)}
        width={900}
      >
        {viewProduct && (
          <div style={{ maxWidth: 800 }}>
            <Row gutter={16}>
              <Col span={12}><b>T√™n s·∫£n ph·∫©m:</b> {viewProduct.name}</Col>
              <Col span={12}><b>Tr·∫°ng th√°i:</b> {viewProduct.status}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}>
                <b>B√°n ch·∫°y:</b>{' '}
                {viewProduct.isbestSeller ? (
                  <span style={{ color: '#faad14', fontWeight: 'bold' }}>C√≥</span>
                ) : (
                  <span>Kh√¥ng</span>
                )}
              </Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><b>M√†u s·∫Øc:</b>{' '}
                {Array.isArray(viewProduct.colors) && viewProduct.colors.length > 0
                  ? viewProduct.colors.map((color, idx) => (
                    <span key={idx} style={{
                      display: 'inline-block',
                      background: '#f0f0f0',
                      borderRadius: 8,
                      padding: '2px 10px',
                      marginRight: 6,
                      marginBottom: 4,
                      border: '1px solid #ddd',
                    }}>{color}</span>
                  ))
                  : '-'}
              </Col>
              <Col span={12}>
                <b>T√¨nh tr·∫°ng b√°n:</b>{' '}
                {Array.isArray(viewProduct.statusSell) && viewProduct.statusSell.length > 0
                  ? viewProduct.statusSell.map((status, idx) => (
                    <span key={idx} style={{
                      display: 'inline-block',
                      background: '#e6f7ff',
                      borderRadius: 8,
                      padding: '2px 10px',
                      marginRight: 6,
                      marginBottom: 4,
                      border: '1px solid #91d5ff',
                    }}>{status}</span>
                  ))
                  : '-'}
              </Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><b>Gi√° b√°n bu√¥n:</b> {viewProduct.pricesBanBuon?.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</Col>
              <Col span={12}><b>Gi√° b√°n l·∫ª:</b> {viewProduct.pricesBanLe?.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><b>T·ªìn kho:</b> {viewProduct.inventories}</Col>
              <Col span={12}><b>Th∆∞∆°ng hi·ªáu:</b> {viewProduct.brand}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><b>Danh m·ª•c:</b> {viewProduct.category}</Col>
              <Col span={12}>
                <b>Tags:</b>{' '}
                {viewProduct.tags
                  ? viewProduct.tags.toString().split(',').map((tag, idx) => (
                    <span key={idx} style={{
                      display: 'inline-block',
                      background: '#fffbe6',
                      borderRadius: 8,
                      padding: '2px 10px',
                      marginRight: 6,
                      marginBottom: 4,
                      border: '1px solid #ffe58f',
                    }}>{tag.trim()}</span>
                  ))
                  : '-'}
              </Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={24}><b>M√¥ t·∫£:</b> {viewProduct.description}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={24}>
                <b>H√¨nh ·∫£nh:</b>
                <div style={{ display: 'flex', flexWrap: 'wrap', marginTop: 8 }}>
                  {viewProduct.images?.map((img, idx) => (
                    <div key={idx} style={{ marginRight: 8, marginBottom: 8 }}>
                      <img src={img} alt={`H√¨nh ·∫£nh s·∫£n ph·∫©m ${idx + 1}`} style={{ maxWidth: 100, maxHeight: 100, objectFit: 'cover', borderRadius: 8, border: '1px solid #eee' }} />
                    </div>
                  ))}
                </div>
              </Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={24}>
                <b>Th√¥ng tin th√™m:</b>
                <div style={{ marginTop: 8 }}>
                  {(() => {
                    const rows = parseTableInfo(viewProduct.tableInfo);
                    if (!rows.length || (rows.length === 1 && !rows[0].key && !rows[0].value)) {
                      return <span>-</span>;
                    }
                    return (
                      <table style={{ width: '100%', borderCollapse: 'collapse', border: '1px solid #ccc' }}>
                        <tbody>
                          {rows.map((row, idx) => (
                            <tr key={idx} style={idx % 2 === 1 ? { background: '#f9f9f9' } : {}}>
                              <td style={{ fontWeight: 'bold', border: '1px solid #ccc', padding: '4px 8px' }}>{row.key}</td>
                              <td style={{ border: '1px solid #ccc', padding: '4px 8px' }}>{row.value}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    );
                  })()}
                </div>
              </Col>
            </Row>
          </div>
        )}
      </Modal>
    </div>
  )
}

export default ProductManagement